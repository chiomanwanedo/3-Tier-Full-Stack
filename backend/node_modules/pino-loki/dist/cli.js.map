{"version":3,"file":"cli.js","names":["value: any","path: string","defaultValue?: TDefault","current: any","options: { log: LogFormatExpectedObject; logFormat: LogFormat }","options","options?: BuilderOptions","#propsToLabels","options","#levelMap","log: PinoLog","replaceTimestamp?: boolean","convertArrays?: boolean","value","labels: Record<string, string>","level: number","options: {\n    log: PinoLog\n    replaceTimestamp?: boolean\n    additionalLabels?: Record<string, string>\n    convertArrays?: boolean\n    structuredMetaKey?: string\n    logFormat?: LogFormat\n  }","#buildTimestamp","#buildLabelsFromProps","structuredMetadata: Record<string, any>","#stringifyLog","message: string","responseBody: string","options: LokiOptions","#options","options","#logBuilder","err: any","logs: PinoLog[] | PinoLog","#handleFailure","options: LokiOptions","options","userOptions: LokiOptions","batchInterval: NodeJS.Timeout | undefined","pinoLogBuffer: PinoLog[]","opts: CustomParseArgsOptionsConfig","headers: string","headerObject: Record<string, string>","pkg","config: LokiOptions"],"sources":["../src/cli/args.ts","../src/debug.ts","../src/constants.ts","../src/get.ts","../src/format_mesage.ts","../src/log_builder.ts","../src/log_pusher.ts","../src/index.ts","../src/cli/print_help.ts","../package.json","../src/cli/index.ts"],"sourcesContent":["import type { ParseArgsOptionDescriptor, ParseArgsOptionsConfig } from 'node:util'\n\ninterface CustomParseArgsOptionDescriptor extends ParseArgsOptionDescriptor {\n  help?: string\n}\n\nexport interface CustomParseArgsOptionsConfig extends ParseArgsOptionsConfig {\n  [longOption: string]: CustomParseArgsOptionDescriptor\n}\n\nexport const options = {\n  'version': {\n    type: 'boolean',\n    short: 'v',\n    help: `Print version number and exit`,\n  },\n  'user': {\n    type: 'string',\n    short: 'u',\n    help: 'Loki username',\n  },\n  'password': {\n    type: 'string',\n    short: 'p',\n    help: 'Loki password',\n  },\n  'hostname': {\n    type: 'string',\n    default: 'http://localhost:3100',\n    help: 'URL for Loki',\n  },\n  'endpoint': {\n    type: 'string',\n    default: '/loki/api/v1/push',\n    help: 'Path to the Loki push API',\n  },\n  'batch': {\n    type: 'boolean',\n    default: true,\n    short: 'b',\n    help: 'Should logs be sent in batch mode',\n  },\n  'interval': {\n    type: 'string',\n    default: '5',\n    short: 'i',\n    help: 'The interval at which batched logs are sent in seconds',\n  },\n  'timeout': { type: 'string', default: '2000', short: 't', help: 'Timeout for request to Loki' },\n  'silenceErrors': {\n    type: 'boolean',\n    default: false,\n    short: 's',\n    help: 'If false, errors will be displayed in the console',\n  },\n  'replaceTimestamp': {\n    type: 'boolean',\n    default: false,\n    short: 'r',\n    help: 'Replace pino logs timestamps with Date.now()',\n  },\n  'labels': { type: 'string', short: 'l', help: 'Additional labels to be added to all Loki logs' },\n  'convertArrays': {\n    type: 'boolean',\n    default: false,\n    help: 'If true, arrays will be converted to objects',\n  },\n  'structuredMetaKey': {\n    type: 'string',\n    default: '',\n    help: 'Key to use for structured metadata',\n  },\n  'propsLabels': {\n    type: 'string',\n    help: 'Fields in log line to convert to Loki labels (comma separated values)',\n  },\n  /**\n   * Kept for backwards compatibility. node:util.parseArgs does not support short options\n   * with multiple characters, and `-pl` was used with commander before\n   */\n  'pl': {\n    type: 'string',\n    help: 'Deprecated: Use --propsLabels instead. Fields in log line to convert to Loki labels (comma separated values)',\n  },\n  'no-stdout': {\n    type: 'boolean',\n    default: false,\n    help: 'Disable output to stdout',\n  },\n  'headers': {\n    type: 'string',\n    help: 'Custom headers to be sent with the request to Loki (comma separated key=value pairs)',\n  },\n  'help': {\n    type: 'boolean',\n    short: 'h',\n    default: false,\n    help: 'Print this help message and exit',\n  },\n} as const\n","import { debuglog } from 'node:util'\n\nexport default debuglog('pino-loki')\n","/* eslint-disable @typescript-eslint/no-redeclare */\nexport const LokiLogLevel = {\n  Info: 'info',\n  Debug: 'debug',\n  Error: 'error',\n  Warning: 'warning',\n  Critical: 'critical',\n} as const\n\nexport type LokiLogLevel = (typeof LokiLogLevel)[keyof typeof LokiLogLevel]\n","/**\n * Dynamically get a nested value from an array or object with a\n * string.\n */\nexport function get<TDefault = unknown>(\n  value: any,\n  path: string,\n  defaultValue?: TDefault,\n): TDefault {\n  const segments = path.split(/[.[\\]]/g)\n  let current: any = value\n\n  for (const key of segments) {\n    if (current === null) return defaultValue as TDefault\n    if (current === undefined) return defaultValue as TDefault\n\n    const unquotedKey = key.replace(/[\"']/g, '')\n    if (unquotedKey.trim() === '') continue\n\n    current = current[unquotedKey]\n  }\n\n  if (current === undefined) return defaultValue as TDefault\n  return current\n}\n","import { get } from './get.ts'\nimport type { LogFormat, LogFormatExpectedObject } from './types.ts'\n\nexport function formatLog(options: { log: LogFormatExpectedObject; logFormat: LogFormat }): string {\n  const { log, logFormat } = options\n\n  if (logFormat && typeof logFormat === 'string') {\n    return logFormat.replace(/{([^{}]+)}/g, (_match, p1) => get(log, p1) || '')\n  }\n\n  if (logFormat && typeof logFormat === 'function') {\n    return logFormat(options.log)\n  }\n\n  throw new Error('Message format must be a string or a function. Received: ' + typeof logFormat)\n}\n","import { LokiLogLevel } from './constants.ts'\nimport { formatLog } from './format_mesage.ts'\nimport type { LokiLog, PinoLog, LokiOptions, LogFormat, LogFormatExpectedObject } from './types.ts'\n\nconst NANOSECONDS_LENGTH = 19\n\ntype BuilderOptions = Pick<LokiOptions, 'propsToLabels' | 'levelMap'>\n\n/**\n * Converts a Pino log to a Loki log\n */\nexport class LogBuilder {\n  #propsToLabels: string[]\n  #levelMap: { [key: number]: LokiLogLevel }\n\n  constructor(options?: BuilderOptions) {\n    this.#propsToLabels = options?.propsToLabels || []\n    this.#levelMap = Object.assign(\n      {\n        10: LokiLogLevel.Debug,\n        20: LokiLogLevel.Debug,\n        30: LokiLogLevel.Info,\n        40: LokiLogLevel.Warning,\n        50: LokiLogLevel.Error,\n        60: LokiLogLevel.Critical,\n      },\n      options?.levelMap,\n    )\n  }\n\n  /**\n   * Builds a timestamp string from a Pino log object.\n   * @returns A string representing the timestamp in nanoseconds.\n   */\n  #buildTimestamp(log: PinoLog, replaceTimestamp?: boolean): string {\n    if (replaceTimestamp) {\n      return (new Date().getTime() * 1_000_000).toString()\n    }\n\n    const time = log.time || Date.now()\n    const strTime = time.toString()\n\n    // Returns the time if it's already in nanoseconds\n    if (strTime.length === NANOSECONDS_LENGTH) {\n      return strTime\n    }\n\n    // Otherwise, find the missing factor to convert it to nanoseconds\n    const missingFactor = 10 ** (19 - strTime.length)\n    return (time * missingFactor).toString()\n  }\n\n  /**\n   * Stringify the log object. If convertArrays is true then it will convert\n   * arrays to objects with indexes as keys.\n   */\n  #stringifyLog(log: PinoLog, convertArrays?: boolean): string {\n    return JSON.stringify(log, (_, value) => {\n      if (!convertArrays) return value\n\n      if (Array.isArray(value)) {\n        return Object.fromEntries(value.map((value, index) => [index, value]))\n      }\n\n      return value\n    })\n  }\n\n  #buildLabelsFromProps(log: PinoLog) {\n    const labels: Record<string, string> = {}\n\n    for (const prop of this.#propsToLabels) {\n      if (log[prop]) {\n        labels[prop] = log[prop]\n      }\n    }\n\n    return labels\n  }\n\n  /**\n   * Convert a level to a human readable status\n   */\n  statusFromLevel(level: number) {\n    return this.#levelMap[level] || LokiLogLevel.Info\n  }\n\n  /**\n   * Build a loki log entry from a pino log\n   */\n  build(options: {\n    log: PinoLog\n    replaceTimestamp?: boolean\n    additionalLabels?: Record<string, string>\n    convertArrays?: boolean\n    structuredMetaKey?: string\n    logFormat?: LogFormat\n  }): LokiLog {\n    const status = this.statusFromLevel(options.log.level)\n    const time = this.#buildTimestamp(options.log, options.replaceTimestamp)\n    const propsLabels = this.#buildLabelsFromProps(options.log)\n\n    const hostname = options.log.hostname\n    options.log.hostname = undefined\n\n    const structuredMetadata: Record<string, any> = options.structuredMetaKey\n      ? options.log[options.structuredMetaKey]\n      : undefined\n\n    const formattedMessage = options.logFormat\n      ? formatLog({\n          logFormat: options.logFormat,\n          log: { ...options.log, lokilevel: status } as LogFormatExpectedObject,\n        })\n      : this.#stringifyLog(options.log, options.convertArrays)\n\n    return {\n      stream: {\n        level: status,\n        hostname,\n        ...options.additionalLabels,\n        ...propsLabels,\n      },\n      values: [\n        // Make sure to exclude structured metadata from the log object\n        // if not present because olders versions of Loki will not accept\n        // it and will return an error.\n        structuredMetadata\n          ? [time, formattedMessage, structuredMetadata]\n          : [time, formattedMessage],\n      ],\n    }\n  }\n}\n","import debug from './debug.ts'\nimport { LogBuilder } from './log_builder.ts'\nimport type { PinoLog, LokiOptions } from './types.ts'\n\nclass RequestError extends Error {\n  responseBody: string\n\n  constructor(message: string, responseBody: string) {\n    super(message)\n    this.name = 'RequestError'\n    this.responseBody = responseBody\n  }\n}\n\n/**\n * Responsible for pushing logs to Loki\n */\nexport class LogPusher {\n  #options: LokiOptions\n  #logBuilder: LogBuilder\n\n  constructor(options: LokiOptions) {\n    this.#options = options\n\n    this.#logBuilder = new LogBuilder({\n      levelMap: options.levelMap,\n      propsToLabels: options.propsToLabels,\n    })\n  }\n\n  /**\n   * Handle push failures\n   */\n  #handleFailure(err: any) {\n    if (this.#options.silenceErrors === true) {\n      return\n    }\n\n    if (err instanceof RequestError) {\n      console.error(err.message + '\\n' + err.responseBody)\n      return\n    }\n\n    console.error('Got unknown error when trying to send log to Loki, error output:', err)\n  }\n\n  /**\n   * Push one or multiples logs entries to Loki\n   */\n  async push(logs: PinoLog[] | PinoLog) {\n    if (!Array.isArray(logs)) {\n      logs = [logs]\n    }\n\n    const lokiLogs = logs.map((log) =>\n      this.#logBuilder.build({\n        log,\n        replaceTimestamp: this.#options.replaceTimestamp,\n        additionalLabels: this.#options.labels,\n        convertArrays: this.#options.convertArrays,\n        structuredMetaKey: this.#options.structuredMetaKey,\n        logFormat: this.#options.logFormat,\n      }),\n    )\n\n    debug(`[LogPusher] pushing ${lokiLogs.length} logs to Loki`)\n\n    try {\n      const response = await fetch(\n        new URL(this.#options.endpoint ?? 'loki/api/v1/push', this.#options.host),\n        {\n          method: 'POST',\n          signal: AbortSignal.timeout(this.#options.timeout ?? 30_000),\n          headers: {\n            ...this.#options.headers,\n            ...(this.#options.basicAuth && {\n              Authorization:\n                'Basic ' +\n                Buffer.from(\n                  `${this.#options.basicAuth.username}:${this.#options.basicAuth.password}`,\n                ).toString('base64'),\n            }),\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ streams: lokiLogs }),\n        },\n      )\n\n      if (!response.ok) {\n        throw new RequestError('Got error when trying to send log to loki', await response.text())\n      }\n    } catch (err) {\n      this.#handleFailure(err)\n    }\n\n    debug(`[LogPusher] pushed ${lokiLogs.length} logs to Loki`, { logs: lokiLogs })\n  }\n}\n","import abstractTransportBuild from 'pino-abstract-transport'\n\nimport debug from './debug.ts'\nimport { LogPusher } from './log_pusher.ts'\nimport { LokiLogLevel } from './constants.ts'\nimport type { PinoLog, LokiOptions } from './types.ts'\n\n/**\n * Resolves the options for the Pino Loki transport\n */\nfunction resolveOptions(options: LokiOptions) {\n  return {\n    ...options,\n    endpoint: options.endpoint ?? 'loki/api/v1/push',\n    timeout: options.timeout ?? 30_000,\n    silenceErrors: options.silenceErrors ?? false,\n    batching: options.batching ?? true,\n    interval: options.interval ?? 5,\n    replaceTimestamp: options.replaceTimestamp ?? false,\n    propsToLabels: options.propsToLabels ?? [],\n    convertArrays: options.convertArrays ?? false,\n    structuredMetaKey: options.structuredMetaKey,\n    logFormat: options.logFormat,\n  }\n}\n\nfunction pinoLoki(userOptions: LokiOptions) {\n  const options = resolveOptions(userOptions)\n  const logPusher = new LogPusher(options)\n\n  debug(`[PinoLoki] initialized with options: ${JSON.stringify(options)}`)\n\n  let batchInterval: NodeJS.Timeout | undefined\n  let pinoLogBuffer: PinoLog[] = []\n\n  return abstractTransportBuild(\n    async (source) => {\n      if (options.batching) {\n        batchInterval = setInterval(async () => {\n          debug(`Batch interval reached, sending ${pinoLogBuffer.length} logs to Loki`)\n\n          if (pinoLogBuffer.length === 0) {\n            return\n          }\n\n          logPusher.push(pinoLogBuffer)\n          pinoLogBuffer = []\n        }, options.interval! * 1000)\n      }\n\n      for await (const obj of source) {\n        if (options.batching) {\n          pinoLogBuffer.push(obj)\n          continue\n        }\n\n        logPusher.push(obj)\n      }\n    },\n    {\n      /**\n       * When transport is closed, push remaining logs to Loki\n       * and clear the interval\n       */\n      async close() {\n        if (options.batching) {\n          clearInterval(batchInterval!)\n          await logPusher.push(pinoLogBuffer)\n        }\n      },\n    },\n  )\n}\n\nexport default pinoLoki\nexport { LokiLogLevel, pinoLoki, type LokiOptions, type PinoLog }\n","import type { CustomParseArgsOptionsConfig } from './args.ts'\n\nexport function printHelp(opts: CustomParseArgsOptionsConfig) {\n  console.log(`Usage: pino-loki [options]\\n\\nOptions:`)\n\n  const flagsData = Object.entries(opts).map(([key, option]) => ({\n    flags:\n      (option.short ? `-${option.short}, --${key}` : `--${key}`) +\n      (option.type === 'boolean' ? '' : ` <value>`),\n    help: option.help,\n    default: option.default,\n  }))\n\n  const maxFlagsWidth = Math.max(...flagsData.map((item) => item.flags.length))\n\n  for (const { flags, help, default: defaultValue } of flagsData) {\n    const paddedFlags = flags.padEnd(maxFlagsWidth + 2)\n    const defaultText = defaultValue ? ` (default: ${defaultValue})` : ''\n\n    console.log(`  ${paddedFlags}${help}${defaultText}`)\n  }\n\n  console.log(\n    `\\nExample:\\n  pino-loki --hostname http://localhost:3100 --user myuser --password mypass --batch --interval 10`,\n  )\n}\n","{\n  \"name\": \"pino-loki\",\n  \"type\": \"module\",\n  \"version\": \"2.6.0\",\n  \"packageManager\": \"pnpm@10.11.0\",\n  \"description\": \"A transport for pino that sends messages to Loki\",\n  \"author\": \"Julien Ripouteau <julien@ripouteau.com>\",\n  \"license\": \"MIT\",\n  \"funding\": \"https://github.com/sponsors/Julien-R44\",\n  \"homepage\": \"https://github.com/Julien-R44/pino-loki#readme\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Julien-R44/pino-loki.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/Julien-R44/pino-loki/issues\"\n  },\n  \"keywords\": [\n    \"pino\",\n    \"pino-transport\",\n    \"loki\",\n    \"logging\"\n  ],\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/index.js\",\n      \"require\": \"./dist/index.cjs\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"main\": \"./dist/index.cjs\",\n  \"module\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.cts\",\n  \"bin\": {\n    \"pino-loki\": \"dist/cli.js\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"build\": \"tsdown\",\n    \"lint\": \"eslint .\",\n    \"format\": \"prettier --write .\",\n    \"prepublishOnly\": \"pnpm build\",\n    \"release\": \"bumpp --commit --push --tag && pnpm publish\",\n    \"quick:test\": \"node --experimental-strip-types bin/test.ts\",\n    \"test\": \"c8 node --experimental-strip-types bin/test.ts\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"checks\": \"pnpm typecheck && pnpm lint && pnpm test\"\n  },\n  \"dependencies\": {\n    \"pino-abstract-transport\": \"^2.0.0\",\n    \"pump\": \"^3.0.2\"\n  },\n  \"devDependencies\": {\n    \"@japa/assert\": \"^4.0.1\",\n    \"@japa/runner\": \"^4.2.0\",\n    \"@japa/spec-reporter\": \"^1.3.3\",\n    \"@julr/tooling-configs\": \"^4.0.0\",\n    \"@types/node\": \"^22.15.29\",\n    \"@types/pump\": \"^1.1.3\",\n    \"bumpp\": \"^10.1.1\",\n    \"c8\": \"^10.1.3\",\n    \"dotenv\": \"^16.5.0\",\n    \"eslint\": \"^9.28.0\",\n    \"msw\": \"^2.8.7\",\n    \"pino\": \"^9.7.0\",\n    \"pino-pretty\": \"^13.0.0\",\n    \"prettier\": \"^3.5.3\",\n    \"tsdown\": \"^0.12.6\",\n    \"typescript\": \"^5.8.3\"\n  },\n  \"prettier\": \"@julr/tooling-configs/prettier\"\n}\n","#!/usr/bin/env node\n\nimport pump from 'pump'\nimport { parseArgs } from 'node:util'\n\nimport { options } from './args.ts'\nimport { pinoLoki } from '../index.ts'\nimport { printHelp } from './print_help.ts'\nimport type { LokiOptions } from '../types.ts'\nimport pkg from '../../package.json' with { type: 'json' }\n\nexport function validateHeaders(headers: string): Record<string, string> {\n  const headerPairs = headers.split(',').map((pair) => pair.trim())\n  const headerObject: Record<string, string> = {}\n\n  for (const pair of headerPairs) {\n    const [key, value] = pair.split('=').map((part) => part.trim())\n    if (!key || !value)\n      throw new Error(`Invalid header format: \"${pair}\". Expected format is \"key=value\".`)\n\n    headerObject[key] = value\n  }\n\n  return headerObject\n}\n\n/**\n * Create a PinoLokiOptionsContract from cli arguments\n */\nexport const createPinoLokiConfigFromArgs = () => {\n  const { values } = parseArgs({ options })\n\n  if (values.help) {\n    printHelp(options)\n    process.exit(0)\n  }\n\n  if (values.version) {\n    console.log(`v${pkg.version}`)\n    process.exit(0)\n  }\n\n  const propsLabels = (values.propsLabels ?? values.pl ?? '')\n    .split(',')\n    .map((label) => label.trim())\n    .filter(Boolean)\n\n  const config: LokiOptions = {\n    host: values.hostname,\n    endpoint: values.endpoint,\n    timeout: values.timeout ? Number(values.timeout) : undefined,\n    silenceErrors: values.silenceErrors,\n    batching: values.batch,\n    interval: values.interval ? Number(values.interval) : undefined,\n    replaceTimestamp: values.replaceTimestamp,\n    labels: values.labels ? JSON.parse(values.labels) : undefined,\n    propsToLabels: propsLabels,\n    structuredMetaKey: values.structuredMetaKey,\n    convertArrays: values.convertArrays,\n    headers: values.headers ? validateHeaders(values.headers) : undefined,\n  }\n\n  if (values.user && values.password) {\n    config.basicAuth = { username: values.user, password: values.password }\n  }\n\n  return config\n}\n\nfunction main() {\n  pump(process.stdin, pinoLoki(createPinoLokiConfigFromArgs()))\n}\n\nmain()\n"],"mappings":"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"}